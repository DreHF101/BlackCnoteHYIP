name: Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Security and Code Quality Checks
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: Run PHP security scan
        run: |
          composer global require enlightn/security-checker
          security-checker security:check composer.lock
      
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8888'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # PHP Testing
  php-tests:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis
          coverage: xdebug
      
      - name: Install Composer dependencies
        run: |
          cd hyiplab
          composer install --prefer-dist --no-progress
      
      - name: Run PHPUnit tests
        run: |
          cd hyiplab
          vendor/bin/phpunit --coverage-clover coverage.xml
      
      - name: Run PHPStan analysis
        run: |
          cd hyiplab
          vendor/bin/phpstan analyse --level=8
      
      - name: Run PHP CS Fixer
        run: |
          cd hyiplab
          vendor/bin/php-cs-fixer fix --dry-run --diff
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: hyiplab/coverage.xml
          flags: php-tests
          name: codecov-php

  # React Testing
  react-tests:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: react-app/package-lock.json
      
      - name: Install React dependencies
        run: |
          cd react-app
          npm ci
      
      - name: Run ESLint
        run: |
          cd react-app
          npm run lint
      
      - name: Run TypeScript check
        run: |
          cd react-app
          npm run type-check
      
      - name: Run React tests
        run: |
          cd react-app
          npm test -- --coverage --watchAll=false
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: react-app/coverage/lcov.info
          flags: react-tests
          name: codecov-react

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [php-tests, react-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: react-app/package-lock.json
      
      - name: Build React app
        run: |
          cd react-app
          npm ci
          npm run build
      
      - name: Build Docker images
        run: |
          docker build -t blackcnote-wordpress:${{ github.sha }} ./blackcnote
          docker build -t blackcnote-react:${{ github.sha }} ./react-app
      
      - name: Push Docker images
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag blackcnote-wordpress:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/blackcnote-wordpress:${{ github.sha }}
          docker tag blackcnote-react:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/blackcnote-react:${{ github.sha }}
          docker push ${{ secrets.DOCKER_REGISTRY }}/blackcnote-wordpress:${{ github.sha }}
          docker push ${{ secrets.DOCKER_REGISTRY }}/blackcnote-react:${{ github.sha }}

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment script here
          ./scripts/deploy-staging.sh
      
      - name: Run staging health checks
        run: |
          echo "Running health checks on staging..."
          ./scripts/health-check.sh staging
      
      - name: Run staging tests
        run: |
          echo "Running integration tests on staging..."
          ./scripts/test-staging.sh
      
      - name: Notify staging deployment
        if: always()
        run: |
          echo "Staging deployment completed!"
          # Add notification script here (Slack, email, etc.)

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment script here
          ./scripts/deploy-production.sh
      
      - name: Run production health checks
        run: |
          echo "Running health checks on production..."
          ./scripts/health-check.sh production
      
      - name: Run production tests
        run: |
          echo "Running integration tests on production..."
          ./scripts/test-production.sh
      
      - name: Update monitoring
        run: |
          echo "Updating monitoring configuration..."
          ./scripts/update-monitoring.sh
      
      - name: Notify production deployment
        if: always()
        run: |
          echo "Production deployment completed!"
          # Add notification script here (Slack, email, etc.)

  # Post-Deployment Monitoring
  monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup monitoring
        run: |
          echo "Setting up monitoring..."
          ./scripts/setup-monitoring.sh
      
      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          ./scripts/performance-test.sh
      
      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          ./scripts/generate-report.sh
      
      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: reports/ 