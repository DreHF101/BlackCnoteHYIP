#!/usr/bin/env pwsh

# BlackCnote Complete System Test Script
# ======================================
# This script tests all BlackCnote system components

Write-Host "üß™ BlackCnote Complete System Test" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Test 1: WordPress Frontend
Write-Host "üîç Test 1: WordPress Frontend (Port 8888)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8888/" -UseBasicParsing -TimeoutSec 10
    
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ WordPress frontend returned HTTP 200" -ForegroundColor Green
        
        if ($response.Content -match "Loading BlackCnote") {
            Write-Host "  ‚úÖ React container is present" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  React container not found" -ForegroundColor Yellow
        }
        
        if ($response.Content -match "BlackCnote") {
            Write-Host "  ‚úÖ BlackCnote theme is loading" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  BlackCnote theme not found" -ForegroundColor Yellow
        }
        
        if ($response.Content -match "declare\(strict_types=1\)") {
            Write-Host "  ‚ùå PHP still showing raw code" -ForegroundColor Red
        } else {
            Write-Host "  ‚úÖ PHP is executing correctly" -ForegroundColor Green
        }
    } else {
        Write-Host "  ‚ùå WordPress frontend returned HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ùå Error testing WordPress frontend: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: React App
Write-Host "üîç Test 2: React App (Port 5174)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5174/" -UseBasicParsing -TimeoutSec 10
    
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ React app returned HTTP 200" -ForegroundColor Green
        
        if ($response.Content -match "BlackCnote") {
            Write-Host "  ‚úÖ React app contains BlackCnote content" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  React app content unclear" -ForegroundColor Yellow
        }
    } else {
        Write-Host "  ‚ùå React app returned HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ùå Error testing React app: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: WordPress Admin
Write-Host "üîç Test 3: WordPress Admin (Port 8888/wp-admin/)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8888/wp-admin/" -UseBasicParsing -TimeoutSec 10
    
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ WordPress admin returned HTTP 200" -ForegroundColor Green
        
        if ($response.Content -match "WordPress") {
            Write-Host "  ‚úÖ WordPress admin interface is loading" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  WordPress admin interface unclear" -ForegroundColor Yellow
        }
        
        if ($response.Content -match "Loading BlackCnote") {
            Write-Host "  ‚ùå Admin still showing React loading" -ForegroundColor Red
        } else {
            Write-Host "  ‚úÖ Admin is not using theme template" -ForegroundColor Green
        }
        
        if ($response.Content -match "wp-admin") {
            Write-Host "  ‚úÖ Admin contains wp-admin elements" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  Admin wp-admin elements unclear" -ForegroundColor Yellow
        }
    } else {
        Write-Host "  ‚ùå WordPress admin returned HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ùå Error testing WordPress admin: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: Docker Containers
Write-Host "üîç Test 4: Docker Containers..." -ForegroundColor Yellow
try {
    $containers = docker ps --filter "name=blackcnote" --format "table {{.Names}}\t{{.Status}}"
    
    if ($containers -match "blackcnote-wordpress") {
        Write-Host "  ‚úÖ WordPress container is running" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå WordPress container is not running" -ForegroundColor Red
    }
    
    if ($containers -match "blackcnote-react") {
        Write-Host "  ‚úÖ React container is running" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå React container is not running" -ForegroundColor Red
    }
    
    if ($containers -match "blackcnote-mysql") {
        Write-Host "  ‚úÖ MySQL container is running" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå MySQL container is not running" -ForegroundColor Red
    }
    
} catch {
    Write-Host "  ‚ùå Error checking Docker containers: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: Admin User
Write-Host "üîç Test 5: Admin User..." -ForegroundColor Yellow
try {
    $result = docker exec blackcnote-wordpress php /var/www/html/scripts/create-admin-user.php
    if ($result -match "already exists") {
        Write-Host "  ‚úÖ Administrator user exists" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö†Ô∏è  Admin user status unclear" -ForegroundColor Yellow
    }
} catch {
    Write-Host "  ‚ùå Error checking admin user: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "üß™ Complete system test finished!" -ForegroundColor Green
Write-Host "üí° Access your BlackCnote system:" -ForegroundColor Cyan
Write-Host "   üåê Frontend: http://localhost:8888" -ForegroundColor White
Write-Host "   ‚öõÔ∏è  React App: http://localhost:5174" -ForegroundColor White
Write-Host "   üîß Admin: http://localhost:8888/wp-admin/" -ForegroundColor White
Write-Host "   üë§ Login: admin / password" -ForegroundColor White 